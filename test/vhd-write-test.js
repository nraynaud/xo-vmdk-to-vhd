'use strict'

import {expect, assert} from 'chai'
import {describe, it} from 'mocha'
import {readFile} from 'fs-promise'
import {exec} from 'child-process-promise'
import {
  createFooter,
  createDynamicDiskHeader,
  computeChecksum,
  createExpandedEmptyFile,
  computeGeometryForSize
} from '../src/vhd-write'

describe('VHD writing', function () {
  it('computeChecksum() can is correct against some reference values', () => {
    // those values were taken from a file generated by qemu
    const testValue1 = '636F6E6563746978000000020001000000000000000002001F34DB9F71656D75000500035769326B0000000000019800000000000001980000030411000000030000000033B3A5E17F94433498376740246E5660'
    const expectedChecksum1 = 0xFFFFEFB2
    const testValue2 = '6378737061727365FFFFFFFFFFFFFFFF0000000000000600000100000000000100200000'
    const expectedChecksum2 = 0xFFFFF476
    expect(computeChecksum(new Buffer(testValue1, 'hex'))).to.equal(expectedChecksum1)
    expect(computeChecksum(new Buffer(testValue2, 'hex'))).to.equal(expectedChecksum2)
  })
  it('createFooter() does not crash', () => {
    createFooter(104448, Math.floor(Date.now() / 1000), {cylinders: 3, heads: 4, sectorsPerTrack: 17})
    expect('a').to.equal('a')
  })
  it('createDynamicDiskHeader() does not crash', () => {
    createDynamicDiskHeader(1, 0x00200000)
    expect('a').to.equal('a')
  })
  it('createEmptyFile() does not crash', () => {
    const fileName = 'output.vhd'
    const rawFilename = 'output.raw'
    const randomFileName = 'random.raw'
    const geometry = computeGeometryForSize(1024 * 1024 * 8)
    const dataSize = geometry.actualSize
    const buffer = new Buffer(dataSize)
    buffer.fill(7)
    return exec('base64 /dev/urandom | head -c ' + dataSize + ' > ' + randomFileName)
      .then(() => {
        return readFile(randomFileName)
      })
      .then((buffer) => {
        return createExpandedEmptyFile(fileName, buffer, 523557791, geometry)
          .then(() => {
            return exec('qemu-img convert -fvpc -Oraw ' + fileName + ' ' + rawFilename)
          })
          .then(() => {
            return readFile(rawFilename)
          })
          .then((fileContent) => {
            expect(fileContent.length).to.equal(dataSize)
            for (let i = 0; i < fileContent.length; i++) {
              if (fileContent[i] !== buffer[i]) {
                assert.fail(fileContent[i], 0)
              }
            }
          })
      })
  })
})
